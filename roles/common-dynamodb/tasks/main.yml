---
#  - name: Create DynamoDB
#    dynamodb_table:
#      profile: "{{ env }}"
#      name: "{{ table_name }}"
#      region: "{{ aws_region }}"
#      hash_key_name: contextId
#      hash_key_type: STRING
#      range_key_name: created
#      range_key_type: STRING
#      read_capacity: "{{ read_capacity }}"
#      write_capacity: "{{ write_capacity }}"

  - name: Create DynamoDB
    dynamodb_table:
      profile: "{{ env }}"
      region: "{{ aws_region }}"
      name: "{{ table_name }}"
      hash_key_name: contextId
      hash_key_type: STRING
      range_key_name: created
      range_key_type: STRING
      indexes:
        - name: contextId-actorId-index
          type: include
          hash_key_name: contextId
          range_key_name: actorId
          includes:
            - ALL
        - name: contextId-objectId-index
          type: include
          hash_key_name: contextId
          range_key_name: objectId
          includes:
            - ALL
      read_capacity: "{{ read_capacity }}"
      write_capacity: "{{ write_capacity }}"
    register: result
    until: result.table_status != "CREATING"
    retries: 5
    delay: 2

  - debug: var=result

  #-- aws dynamodb update-table --table-name hartmut_test_table --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES --region eu-central-1
  - name: Activate a Stream for Backup-Issues
    command: >
        aws dynamodb update-table
        --profile {{ env }}
        --region {{ aws_region }}
        --table-name {{ table_name }}
        --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES
    register: result
    changed_when: False
    failed_when: result.stderr != '' and result.stderr.find('Table already has an enabled stream') == -1

  - name: Get info from DynamoDB
    command: >
        aws dynamodb describe-table
        --profile {{ env }}
        --region {{ aws_region }}
        --table-name {{ table_name }}
    register: result

  - name: Extract Output
    set_fact:
      stream_status: "{{ result.stdout|from_json }}"

  - name: Extract StreamArn
    set_fact:
      stream_arn: "{{ stream_status.Table.LatestStreamArn }}"
    when: result is defined

  - debug: var=stream_arn

  #-- Activate Backup-System
  - name: get our Backup-System
    git:
      repo: 'https://github.com/snakelab/DynamoDbBackUp.git'
      clone: yes
      dest: '.'
      force: yes
